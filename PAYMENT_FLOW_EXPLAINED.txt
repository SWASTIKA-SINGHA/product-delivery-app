// RAZORPAY PAYMENT FLOW - Simple Explanation
// ==============================================

// STEP 1: User fills the form
// ---------------------------
User enters:
  - Name: "John Doe"
  - Email: "john@example.com"
  - Phone: "9876543210"
  - Address: "123 Main St, City"
  - Delivery: "Express Delivery" (adds ₹50)
  - Payment: "Online Payment (Razorpay)"

Cart Total: ₹500
Delivery: ₹50
Final Total: ₹550


// STEP 2: User clicks "Place Order"
// ----------------------------------
Function placeOrder() is called:
  ✓ Validates all fields
  ✓ Checks cart is not empty
  ✓ Calculates final amount (₹550)
  ✓ Sees payment method is "Online"
  → Calls initiateRazorpayPayment()


// STEP 3: Razorpay Popup Opens
// -----------------------------
initiateRazorpayPayment() does:
  - Creates Razorpay options object with:
    * Your key: rzp_test_RPKqAiU4LBTA7T
    * Amount: 550 × 100 = 55000 paise
    * Customer info (name, email, phone)
  
  - Opens Razorpay payment window
  - User sees professional payment form
  - User can pay via:
    * UPI (Google Pay, PhonePe, etc.)
    * Credit/Debit Card
    * Net Banking
    * Wallets


// STEP 4: User Completes Payment
// -------------------------------
Two scenarios:

A) Payment SUCCESSFUL:
   - Razorpay calls handler() function
   - Returns payment details:
     {
       razorpay_payment_id: "pay_xyz123",
       razorpay_signature: "signature123"
     }
   - Calls processOrder() with:
     * All customer data
     * paymentStatus: "Paid"
     * paymentId: "pay_xyz123"

B) Payment FAILED/CANCELLED:
   - Shows error message
   - Does NOT save order
   - Cart remains unchanged
   - User can try again


// STEP 5: Order is Saved
// -----------------------
processOrder() function:
  - Calls backend.placeOrder()
  - Backend saves order to localStorage with:
    * Order ID (unique)
    * All items in cart
    * Customer details
    * Payment details
    * Delivery info
    * Timestamp
  
  - Clears the cart
  - Shows success confirmation
  - Displays order details


// STEP 6: Confirmation Shown
// ---------------------------
showOrderConfirmation() displays:
  ✓ Order ID: ORD1728012345678
  ✓ Customer: John Doe (john@example.com)
  ✓ Items: 3 items
  ✓ Subtotal: ₹500
  ✓ Delivery: ₹50
  ✓ Total: ₹550
  ✓ Payment: Online - PAID ✓
  ✓ Payment ID: pay_xyz123
  ✓ Delivery: Express (1-2 days)
  ✓ Est. Delivery: Oct 6, 2025
  ✓ Confirmation email sent


// DATA FLOW DIAGRAM
// =================

User Action → Validation → Payment Gateway → Confirmation
    ↓             ↓              ↓                ↓
 Fill Form → Check Fields → Razorpay → Process Order
    ↓             ↓              ↓                ↓
  Submit  →   Validate   →   Pay    →    Save & Show


// CODE STRUCTURE
// ==============

1. placeOrder()
   ↓
   Validates form
   ↓
   if (COD) → processOrder() directly
   if (Online) → initiateRazorpayPayment()
                      ↓
                  Razorpay popup
                      ↓
                  On success → processOrder()
                  On fail → show error


2. processOrder()
   ↓
   backend.placeOrder(orderData)
   ↓
   backend saves to localStorage
   ↓
   backend returns success
   ↓
   showOrderConfirmation()
   ↓
   Clear cart & form


// WHAT HAPPENS BEHIND THE SCENES
// ===============================

Frontend (Your Website):
  - Collects user information
  - Opens Razorpay payment
  - Receives payment confirmation
  - Saves order locally

Razorpay (Payment Gateway):
  - Shows payment interface
  - Handles payment processing
  - Validates card/UPI
  - Confirms payment
  - Returns payment ID

LocalStorage (Browser Storage):
  - Stores cart data
  - Stores all orders
  - Persists across page refresh


// TESTING SCENARIOS
// =================

Test 1: COD Order
  1. Add products to cart
  2. Fill all form fields
  3. Select "Cash on Delivery"
  4. Click "Place Order"
  Result: Order placed immediately, status = "Pending"

Test 2: Successful Online Payment
  1. Add products to cart
  2. Fill all form fields
  3. Select "Online Payment (Razorpay)"
  4. Click "Place Order"
  5. In Razorpay popup, use test card:
     Card: 4111 1111 1111 1111
     CVV: 123
     Expiry: 12/25
  6. Click Pay
  Result: Order placed after payment, status = "Paid", payment ID shown

Test 3: Cancelled Payment
  1. Add products to cart
  2. Fill all form fields
  3. Select "Online Payment (Razorpay)"
  4. Click "Place Order"
  5. In Razorpay popup, click X to close
  Result: Alert shown, order NOT placed, cart unchanged

Test 4: Failed Payment
  1. Follow steps 1-4 from Test 2
  2. In Razorpay, enter wrong card details
  Result: Error shown, order NOT placed, cart unchanged


// KEY VARIABLES EXPLAINED
// ========================

RAZORPAY_KEY_ID
  - Your public key from Razorpay dashboard
  - Safe to show in frontend
  - Used to identify your account

deliveryCharges
  - Object storing delivery prices
  - standard: 0 (free)
  - express: 50
  - sameday: 100

orderData
  - Contains all order information
  - Passed through functions
  - Saved to localStorage

options (Razorpay)
  - Configuration for payment popup
  - Contains: key, amount, customer info, callbacks


// COMMON QUESTIONS
// ================

Q: Where is payment processed?
A: On Razorpay's secure servers, not your website.

Q: Is payment data safe?
A: Yes, your website never sees card details.

Q: What if user closes popup?
A: Order is not placed, cart remains.

Q: Can I use real payments?
A: Yes, but you need production keys from Razorpay.

Q: Where are orders stored?
A: In browser's localStorage (for now).

Q: How to store in database?
A: Need backend server (Node.js, PHP, etc.).

Q: Will orders persist?
A: Yes, localStorage persists even after closing browser.

Q: What if localStorage is cleared?
A: Orders will be lost (need backend for permanent storage).


// NEXT STEPS FOR PRODUCTION
// ==========================

1. Create backend server (Node.js/PHP)
2. Store orders in database (MySQL/MongoDB)
3. Verify payments server-side
4. Use production Razorpay keys
5. Add email notifications
6. Add SMS notifications
7. Add order tracking
8. Add admin panel
9. Add inventory management
10. Add user accounts
